name: Go Build and Release

on:
  push:
    tags:
      - 'v*' # Ëß¶ÂèëÊù°‰ª∂ÔºöÊé®ÈÄÅ tag
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        default: 'v2.5.8-Beta.6'

permissions:
  contents: write

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  BUILD_DATE: ${{ github.run_id }}
  VERSION: ${{ github.ref_name }}
  RELEASE_DIR: release
  RELEASE_NOTICES: |
    - [üëè] Âà†Èô§ÈùûÂøÖË¶ÅÊó•ÂøóÊòæÁ§∫
    - [üëè] ‰ºòÂåñAIÁ≠îÈ¢òÁ≠ñÁï•


jobs:
  build:
    name: Build (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            goos: linux
#          - os: ubuntu-latest
#            arch: arm64
#            goos: linux
          - os: windows-latest
            arch: amd64
            goos: windows
          # Â¶ÇÊûúÈúÄË¶Å armv7 (32‰Ωç) ‰∫§ÂèâÁºñËØëÔºåÂä†‰∏ãÈù¢‰∏ÄË°å
          # - os: ubuntu-latest
          #   arch: arm
          #   goos: linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies (Linux only)
        if: runner.os == 'Linux' && matrix.arch=='amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev pkg-config gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

      - name: Install dependencies (Linux only)
        if: runner.os == 'Linux' && matrix.arch=='arm64'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libc6:arm64 libc6-dev:arm64
          sudo apt-get install -y libasound2-dev:arm64 pkg-config gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'  # Use Go version from go.mod
          cache: true  # Enable dependency caching

      - name: Get dependencies
        if: runner.os == 'Linux'
        run: |
          export GOPROXY=direct
          export GONOSUMDB=*
          rm -rf go.sum
          go clean -modcache
          go env -w GOSUMDB=off
          go mod tidy

      - name: Get dependencies
        if: runner.os=='Windows'
        run: |
          set GOPROXY=direct
          set GONOSUMDB=*
          go clean -modcache
          del go.sum
          go get -u ./...
          go mod tidy
          
      - name: Disable Other Platforms
        run: |
         if [ "$RUNNER_OS" == "Linux" ]; then
            mv logic/cqie logic/cqie_bak 2>/dev/null || true
            mv logic/enaea logic/enaea_bak 2>/dev/null || true
            mv logic/ketangx logic/ketangx_bak 2>/dev/null || true
            mv logic/welearn logic/welearn_bak 2>/dev/null || true
            mv logic/xuexitong logic/xuexitong_bak 2>/dev/null || true
         elif [ "$RUNNER_OS" == "Windows" ]; then
            ren logic\cqie logic\cqie_bak 2>nul || true
            ren logic\enaea logic\enaea_bak 2>nul || true
            ren logic\ketangx logic\ketangx_bak 2>nul || true
            ren logic\welearn logic\welearn_bak 2>nul || true
            ren logic\xuexitong logic\xuexitong_bak 2>nul || true
         fi

      - name: Prepare Release Directory #ÂàõÂª∫ÂéãÁº©ÁõÆÂΩï
        run: mkdir -p ${{ env.RELEASE_DIR }}/yatori-go-console.${{env.VERSION}}-linux-${{matrix.arch}}-release


      # Build Linux
      - name: Build Linux
        if: runner.os=='Linux' && matrix.arch=='amd64'
        run: |
          CGO_ENABLED=1 GOOS=linux GOARCH=${{matrix.arch}} go build -tags="yinghua_only" \
            -o ${{ env.RELEASE_DIR }}/yatori-go-console.${{env.VERSION}}-linux-${{matrix.arch}}-release/${{ env.PROJECT_NAME }}

      # Build Linux
      - name: Build Linux
        if: runner.os=='Linux' && matrix.arch=='arm64'
        run: |
          CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=linux GOARCH=${{matrix.arch}} go build -tags="yinghua_only" \
            -o ${{ env.RELEASE_DIR }}/yatori-go-console.${{env.VERSION}}-linux-${{matrix.arch}}-release/${{ env.PROJECT_NAME }}

      - name: Build Windows
        if: runner.os == 'Windows'
        run: |
          set CGO_ENABLED=1
          set GOOS=windows 
          set GOARCH=${{matrix.arch}} 
          go build -tags="yinghua_only" -o ${{ env.RELEASE_DIR }}\yatori-go-console.${{env.VERSION}}-windows-${{matrix.arch}}-release\${{ env.PROJECT_NAME }}.exe
  
      - name: Create release tar
        if: runner.os=='Linux'
        run: | # ÊâìÂåÖÂèëÂ∏ÉÁâàÊú¨ÂéãÁº©ÂåÖ
          cp command/config.yaml ${{ env.RELEASE_DIR }}/yatori-go-console.${{env.VERSION}}-linux-${{matrix.arch}}-release
          cd ${{ env.RELEASE_DIR }}
          tar -czvf yatori-go-console.${{env.VERSION}}-linux-${{matrix.arch}}-release.tar.gz yatori-go-console.${{env.VERSION}}-linux-${{matrix.arch}}-release
          rm -rf yatori-go-console.${{env.VERSION}}-linux-${{matrix.arch}}-release
          cd ..

      - name: Create Release zip
        if: runner.os=='Windows'
        run: |
          copy command\config.yaml ${{ env.RELEASE_DIR }}\yatori-go-console.${{env.VERSION}}-windows-${{matrix.arch}}-release
          copy command\start.bat ${{ env.RELEASE_DIR }}\yatori-go-console.${{env.VERSION}}-windows-${{matrix.arch}}-release
          cd ${{ env.RELEASE_DIR }}
          Compress-Archive -Path "yatori-go-console.${{env.VERSION}}-windows-${{matrix.arch}}-release" -DestinationPath "yatori-go-console.${{env.VERSION}}-windows-${{matrix.arch}}-release.zip"
          Remove-Item -Recurse -Force "yatori-go-console.${{env.VERSION}}-windows-${{matrix.arch}}-release"
          cd ..

      - name: Restore Other Platforms
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
              # Windows ÂëΩ‰ª§
            if (Test-Path "logic/cqie_bak") { Rename-Item "logic/cqie_bak" "logic/cqie" }
            if (Test-Path "logic/enaea_bak") { Rename-Item "logic/enaea_bak" "logic/enaea" }
            if (Test-Path "logic/ketangx_bak") { Rename-Item "logic/ketangx_bak" "logic/ketangx" }
            if (Test-Path "logic/welearn_bak") { Rename-Item "logic/welearn_bak" "logic/welearn" }
            if (Test-Path "logic/xuexitong_bak") { Rename-Item "logic/xuexitong_bak" "logic/xuexitong" }
          else
            mv logic/cqie_bak logic/cqie 2>/dev/null || true
            mv logic/enaea_bak logic/enaea 2>/dev/null || true
            mv logic/ketangx_bak logic/ketangx 2>/dev/null || true
            mv logic/welearn_bak logic/welearn 2>/dev/null || true
            mv logic/xuexitong_bak logic/xuexitong 2>/dev/null || true
          fi

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.RELEASE_DIR }}/*  # Êñá‰ª∂ÂèëÂ∏ÉÁõÆÂΩï
          tag_name: ${{ env.VERSION }}
          body: ${{ env.RELEASE_NOTICES }}
          draft: false
          prerelease: false
 
